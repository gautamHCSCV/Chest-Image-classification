cuda
112120
{'abnormal': 0, 'normal': 1}
SqueezeNet(
  (features): Sequential(
    (0): Conv2d(3, 96, kernel_size=(7, 7), stride=(2, 2))
    (1): ReLU(inplace=True)
    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (3): Fire(
      (squeeze): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1), groups=16)
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(16, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
      (expand3x3_activation): ReLU(inplace=True)
    )
    (4): Fire(
      (squeeze): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1), groups=16)
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(16, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
      (expand3x3_activation): ReLU(inplace=True)
    )
    (5): Fire(
      (squeeze): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
      (expand3x3_activation): ReLU(inplace=True)
    )
    (6): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (7): Fire(
      (squeeze): Conv2d(256, 32, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
      (expand3x3_activation): ReLU(inplace=True)
    )
    (8): Fire(
      (squeeze): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1), groups=48)
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
      (expand3x3_activation): ReLU(inplace=True)
    )
    (9): Fire(
      (squeeze): Conv2d(384, 48, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1), groups=48)
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
      (expand3x3_activation): ReLU(inplace=True)
    )
    (10): Fire(
      (squeeze): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), groups=64)
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
      (expand3x3_activation): ReLU(inplace=True)
    )
    (11): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (12): Fire(
      (squeeze): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), groups=64)
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
      (expand3x3_activation): ReLU(inplace=True)
    )
  )
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Conv2d(512, 2, kernel_size=(1, 1), stride=(1, 1))
    (2): AdaptiveAvgPool2d(output_size=(1, 1))
  )
)
Epoch 0/19
----------
Loss after 25536 examples: 0.544
Loss after 51136 examples: 0.589
Loss after 76736 examples: 0.482
Train Accuracy tensor(0.7247, dtype=torch.float64)
Validation Loss is 0.6061348972320557
Validation Accuracy is 0.6802

Epoch 1/19
----------
Loss after 102304 examples: 0.541
Loss after 127904 examples: 0.535
Loss after 153504 examples: 0.545
Loss after 179104 examples: 0.555
Train Accuracy tensor(0.7247, dtype=torch.float64)
Validation Loss is 0.6069079639434815
Validation Accuracy is 0.6778000000000001

Epoch 2/19
----------
Loss after 204672 examples: 0.539
Loss after 230272 examples: 0.574
Loss after 255872 examples: 0.643
Loss after 281472 examples: 0.533
Train Accuracy tensor(0.7257, dtype=torch.float64)
Validation Loss is 0.6069918451786042
Validation Accuracy is 0.6784

Epoch 3/19
----------
Loss after 307040 examples: 0.623
Loss after 332640 examples: 0.525
Loss after 358240 examples: 0.566
Loss after 383840 examples: 0.544
Train Accuracy tensor(0.7265, dtype=torch.float64)
Validation Loss is 0.6072627717018128
Validation Accuracy is 0.6808000000000001

Epoch 4/19
----------
Loss after 409408 examples: 0.518
Loss after 435008 examples: 0.538
Loss after 460608 examples: 0.603
Loss after 486208 examples: 0.517
Train Accuracy tensor(0.7263, dtype=torch.float64)
Validation Loss is 0.6074633676528931
Validation Accuracy is 0.6774

Epoch 5/19
----------
Loss after 511776 examples: 0.577
Loss after 537376 examples: 0.638
Loss after 562976 examples: 0.586
Loss after 588576 examples: 0.469
Train Accuracy tensor(0.7271, dtype=torch.float64)
Validation Loss is 0.6078778895378113
Validation Accuracy is 0.6776

Epoch 6/19
----------
Loss after 614144 examples: 0.484
Loss after 639744 examples: 0.538
Loss after 665344 examples: 0.503
Loss after 690944 examples: 0.586
Train Accuracy tensor(0.7262, dtype=torch.float64)
Validation Loss is 0.6084529690742493
Validation Accuracy is 0.6772

Epoch 7/19
----------
Loss after 716512 examples: 0.527
Loss after 742112 examples: 0.542
Loss after 767712 examples: 0.512
Loss after 793312 examples: 0.583
Train Accuracy tensor(0.7269, dtype=torch.float64)
Validation Loss is 0.608337536239624
Validation Accuracy is 0.679

Epoch 8/19
----------
Loss after 818880 examples: 0.563
Loss after 844480 examples: 0.652
Loss after 870080 examples: 0.566
Loss after 895680 examples: 0.517
Train Accuracy tensor(0.7279, dtype=torch.float64)
Validation Loss is 0.6083975900650025
Validation Accuracy is 0.6812

Epoch 9/19
----------
Loss after 921248 examples: 0.504
Loss after 946848 examples: 0.458
Loss after 972448 examples: 0.626
Loss after 998048 examples: 0.598
Train Accuracy tensor(0.7268, dtype=torch.float64)
Validation Loss is 0.6083211736679077
Validation Accuracy is 0.6816

Epoch 10/19
----------
Loss after 1023616 examples: 0.556
Loss after 1049216 examples: 0.602
Loss after 1074816 examples: 0.598
Train Accuracy tensor(0.7268, dtype=torch.float64)
Validation Loss is 0.6085671586990357
Validation Accuracy is 0.6784

Epoch 11/19
----------
Loss after 1100384 examples: 0.598
Loss after 1125984 examples: 0.566
Loss after 1151584 examples: 0.547
Loss after 1177184 examples: 0.468
Train Accuracy tensor(0.7273, dtype=torch.float64)
Validation Loss is 0.60877932472229
Validation Accuracy is 0.6798000000000001

Epoch 12/19
----------
Loss after 1202752 examples: 0.583
Loss after 1228352 examples: 0.557
Loss after 1253952 examples: 0.514
Loss after 1279552 examples: 0.549
Train Accuracy tensor(0.7280, dtype=torch.float64)
Validation Loss is 0.6091274427413941
Validation Accuracy is 0.6784

Epoch 13/19
----------
Loss after 1305120 examples: 0.537
Loss after 1330720 examples: 0.526
Loss after 1356320 examples: 0.466
Loss after 1381920 examples: 0.474
Train Accuracy tensor(0.7283, dtype=torch.float64)
Validation Loss is 0.6093928938388824
Validation Accuracy is 0.6774

Epoch 14/19
----------
Loss after 1407488 examples: 0.483
Loss after 1433088 examples: 0.540
Loss after 1458688 examples: 0.520
Loss after 1484288 examples: 0.626
Train Accuracy tensor(0.7288, dtype=torch.float64)
Validation Loss is 0.6092905365943909
Validation Accuracy is 0.6786

Epoch 15/19
----------
Loss after 1509856 examples: 0.504
Loss after 1535456 examples: 0.623
Loss after 1561056 examples: 0.487
Loss after 1586656 examples: 0.594
Train Accuracy tensor(0.7288, dtype=torch.float64)
Validation Loss is 0.6096080173492432
Validation Accuracy is 0.6776

Epoch 16/19
----------
Loss after 1612224 examples: 0.588
Loss after 1637824 examples: 0.557
Loss after 1663424 examples: 0.552
Loss after 1689024 examples: 0.648
Train Accuracy tensor(0.7286, dtype=torch.float64)
Validation Loss is 0.6097960706710815
Validation Accuracy is 0.6792

Epoch 17/19
----------
Loss after 1714592 examples: 0.618
Loss after 1740192 examples: 0.504
Loss after 1765792 examples: 0.522
Loss after 1791392 examples: 0.556
Train Accuracy tensor(0.7294, dtype=torch.float64)
Validation Loss is 0.6098236362457276
Validation Accuracy is 0.6784

Epoch 18/19
----------
Loss after 1816960 examples: 0.527
Loss after 1842560 examples: 0.598
Loss after 1868160 examples: 0.425
Loss after 1893760 examples: 0.573
Train Accuracy tensor(0.7282, dtype=torch.float64)
Validation Loss is 0.6098486116409302
Validation Accuracy is 0.6778000000000001

Epoch 19/19
----------
Loss after 1919328 examples: 0.569
Loss after 1944928 examples: 0.500
Loss after 1970528 examples: 0.506
Loss after 1996128 examples: 0.533
Train Accuracy tensor(0.7291, dtype=torch.float64)
Validation Loss is 0.6099581903457642
Validation Accuracy is 0.6784

Training complete in 56m 26s
Test Loss is 0.6083959456240193
Test Accuracy is 0.6841292134831461
